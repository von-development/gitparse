[project]
name = "gitparse"
version = "0.1.3"
description = "A typed, modular Python library for structured repository parsing"
authors = [
    {name = "Victor von Sohsten", email = "vondevelopment@gmail.com"}
]
requires-python = ">=3.9"
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]

[project.urls]
Homepage = "https://github.com/von-development/gitparse"
Repository = "https://github.com/von-development/gitparse.git"
Documentation = "https://github.com/von-development/gitparse#readme"
"Bug Tracker" = "https://github.com/von-development/gitparse/issues"

[project.scripts]
gitparse = "gitparse.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "gitparse"
version = "0.1.3"
description = "A typed, modular Python library for structured repository parsing"
authors = ["Victor von Sohsten <vondevelopment@gmail.com>"]
readme = "README.md"
packages = [{include = "gitparse"}]
repository = "https://github.com/von-development/gitparse"
documentation = "https://github.com/von-development/gitparse#readme"
keywords = ["git", "repository", "parser", "analysis", "metadata"]

[tool.poetry.dependencies]
python = "^3.9"
gitpython = "^3.1.0"
pydantic = "^2.0.0"
python-magic = "^0.4.0"
typing-extensions = "^4.0.0"
tomli = "^2.0.0"
packaging = "^23.0"
colorama = "^0.4.0"
aiofiles = "^24.0.0"
rich = "^13.7.0"

[tool.poetry.group.windows.dependencies]
python-magic-bin = { version = "^0.4.0", platform = "win32" }

[tool.poetry.group.unix.dependencies]
# For Unix systems, libmagic is usually installed via the system package manager
# e.g., apt-get install libmagic1 or yum install file-libs

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^23.7.0"
ruff = "^0.1.0"

[tool.ruff]
line-length = 130
target-version = "py39"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "examples",
    "*.pyc",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable all rules by default
select = ["ALL"]
ignore = [
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D107",   # Missing docstring in __init__
    "D406",   # Section name should end with a newline
    "D407",   # Missing dashed underline after section
    "D413",   # Missing blank line after last section
    "UP007",  # Use X | Y for type annotations (Python 3.10+)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected
    "ANN201",  # Missing return type annotation for public function
    "ANN001",  # Missing type annotation for function argument
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["gitparse"]

[tool.black]
line-length = 100
target-version = ["py39"]
exclude = '''
/(
    \.git
  | \.venv
  | __pycache__
  | build
  | dist
  | examples
  | \.eggs
  | \.tox
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
exclude = [
    "examples/",
    "build/",
    "dist/",
    "tests/",
]

